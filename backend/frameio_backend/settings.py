"""
Django settings for frameio_backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import logging
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,testserver').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third-party apps
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
    
    # Local apps
    "organizations",
    "users", 
    "designs",
    "ai_services",
    "design_export",
    "collaboration",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # AI Services middleware
    "ai_services.middleware.RateLimitMiddleware",
    "ai_services.middleware.AISecurityMiddleware", 
    "ai_services.middleware.AIUsageTrackingMiddleware",
    "organizations.middleware.TenantMiddleware",
]

ROOT_URLCONF = "frameio_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "frameio_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv('DB_NAME', 'frameio_db'),
        "USER": os.getenv('DB_USER', 'postgres'),
        "PASSWORD": os.getenv('DB_PASSWORD', 'password'),
        "HOST": os.getenv('DB_HOST', 'localhost'),
        "PORT": os.getenv('DB_PORT', '5432'),
        "OPTIONS": {
            "sslmode": "prefer",
        },
    }
}

# Use SQLite for development
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'users.authentication.DevelopmentAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'users.authentication.ClerkAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# drf-spectacular settings for API documentation
SPECTACULAR_SETTINGS = {
    'TITLE': 'Frameio AI Services API',
    'DESCRIPTION': 'Advanced AI capabilities for color intelligence, background synthesis, and usage metering',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'TAGS': [
        {'name': 'AI Services', 'description': 'Core AI generation and analysis services'},
        {'name': 'Fabric Analysis', 'description': 'Fabric color extraction and texture analysis'},
        {'name': 'Background Generation', 'description': 'AI-generated background synthesis'},
        {'name': 'Usage Tracking', 'description': 'Usage quotas and billing management'},
        {'name': 'Color Matching', 'description': 'Smart color matching algorithms'},
    ],
    'EXTENSIONS_INFO': {
        'x-logo': {
            'url': 'https://example.com/logo.png',
            'altText': 'Frameio Logo'
        }
    },
    'CONTACT': {
        'name': 'Frameio API Support',
        'email': 'api-support@frameio.com',
        'url': 'https://frameio.com/support'
    },
    'LICENSE': {
        'name': 'MIT License',
        'url': 'https://opensource.org/licenses/MIT'
    },
    'EXTERNAL_DOCS': {
        'description': 'Frameio Documentation',
        'url': 'https://docs.frameio.com'
    }
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

# Allow custom headers for development
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-dev-user-id',
    'x-dev-org-id',
]

# Clerk configuration
CLERK_PUBLISHABLE_KEY = os.getenv('CLERK_PUBLISHABLE_KEY')
CLERK_SECRET_KEY = os.getenv('CLERK_SECRET_KEY')
NEXT_PUBLIC_CLERK_FRONTEND_API = os.getenv('NEXT_PUBLIC_CLERK_FRONTEND_API')

# Validate Clerk configuration
CLERK_CONFIGURED = bool(CLERK_PUBLISHABLE_KEY and CLERK_SECRET_KEY and NEXT_PUBLIC_CLERK_FRONTEND_API)

if not CLERK_CONFIGURED:
    if DEBUG:
        print("WARNING: Clerk configuration is incomplete. Authentication will not work properly.")
        print("Please set the following environment variables:")
        print("- CLERK_PUBLISHABLE_KEY")
        print("- CLERK_SECRET_KEY") 
        print("- NEXT_PUBLIC_CLERK_FRONTEND_API")
    else:
        raise ValueError(
            "Clerk configuration is incomplete. Please set the following environment variables:\n"
            "- CLERK_PUBLISHABLE_KEY\n"
            "- CLERK_SECRET_KEY\n"
            "- NEXT_PUBLIC_CLERK_FRONTEND_API"
        )

# Arcjet configuration
ARCJET_KEY = os.getenv('ARCJET_KEY', '')

# AI Services configuration
# NanoBanana has been removed

# Google Gemini configuration
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_MODEL_NAME = os.getenv('GEMINI_MODEL_NAME', 'gemini-2.5-flash-image')

# Validate Gemini configuration
if not GEMINI_API_KEY:
    print("WARNING: GEMINI_API_KEY not configured. AI services will not be available.")
else:
    print("INFO: GEMINI_API_KEY configured")

# Redis configuration
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'frameio',
        'TIMEOUT': 300,  # 5 minutes default timeout
    },
    'ai_results': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'frameio:ai',
        'TIMEOUT': 3600,  # 1 hour for AI results
    }
}

# Celery configuration for background tasks
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Multi-tenancy settings
TENANT_MODEL = 'organizations.Organization'

# Custom User Model
AUTH_USER_MODEL = 'users.User'

# File upload settings
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Static files settings
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'frameio_backend': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# =============================================================================
# ENVIRONMENT VALIDATION
# =============================================================================
def validate_environment():
    """Validate that all required environment variables are set."""
    required_vars = {
        'SECRET_KEY': SECRET_KEY,
    }
    
    missing_vars = []
    for var_name, var_value in required_vars.items():
        if not var_value:
            missing_vars.append(var_name)
    
    if missing_vars:
        error_msg = f"Missing required environment variables: {', '.join(missing_vars)}"
        if DEBUG:
            print(f"WARNING: {error_msg}")
        else:
            raise ValueError(error_msg)
    
    # Optional but recommended variables
    recommended_vars = {
        'GEMINI_API_KEY': GEMINI_API_KEY,
        'CLERK_PUBLISHABLE_KEY': CLERK_PUBLISHABLE_KEY,
        'CLERK_SECRET_KEY': CLERK_SECRET_KEY,
    }
    
    missing_recommended = []
    for var_name, var_value in recommended_vars.items():
        if not var_value:
            missing_recommended.append(var_name)
    
    if missing_recommended and DEBUG:
        print(f"INFO: Optional environment variables not set: {', '.join(missing_recommended)}")
        print("These are recommended for full functionality.")

# Run validation
validate_environment()
